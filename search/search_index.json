{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flet-Extended-Interactive-Viewer","text":"<p>Flet-Extended-Interactive-Viewer is a Flet control that provides multiple customization options for displaying two-dimensional content.</p>"},{"location":"#api-reference","title":"\ud83d\udcda API Reference","text":""},{"location":"#classes","title":"Classes","text":"<ul> <li> <p>FletExtendedInteractiveViewer - The Class of the extension.</p> </li> <li> <p>ExtendedInteractiveViewerUpdateEvent - Update Event of the extension.</p> </li> </ul>"},{"location":"#example","title":"\ud83d\ude80 Example","text":""},{"location":"#demo","title":"Demo","text":""},{"location":"#code","title":"Code","text":"<pre><code>import flet as ft\n\nfrom flet_extended_interactive_viewer import FletExtendedInteractiveViewer\n\n\ndef main(page: ft.Page):\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\n    text = ft.Text(\"MOVE ME\",size=50)\n\n    def on_click(ex:FletExtendedInteractiveViewer=None,text_move:ft.Text=None):\n        if ex.pan_enabled:\n            ex.pan_enabled = False\n            text_move.value = \"PAN DISABLED\"\n        else:\n            ex.pan_enabled = True\n            text_move.value = \"MOVE ME\"\n        ex.update()\n        text_move.update()\n\n    def get_transformation_click(ex:FletExtendedInteractiveViewer=None,text_update:ft.Text=None):\n        x, y, scale = ex.get_transformation_data()\n        text_update.value = f\"offset_x={round(x)}, offset_y={round(y)}, scale={scale}\"\n        text_update.update()\n    def toggle_scroll_x(ex:FletExtendedInteractiveViewer=None):\n        ex.x_scroll_enabled = not ex.x_scroll_enabled\n        ex.update()\n    def toggle_scroll_y(ex: FletExtendedInteractiveViewer = None):\n        ex.y_scroll_enabled = not ex.y_scroll_enabled\n        ex.update()\n\n    def toggle_interactive(ex: FletExtendedInteractiveViewer = None):\n        ex.interactive_scroll_enabled = not ex.interactive_scroll_enabled\n        ex.update()\n\n    extended = FletExtendedInteractiveViewer(\n                    content=ft.Container(text,width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )),\n                    width=400, height=250,constrained=False,pan_enabled=True,over_zoom_enabled=False,\n                )\n\n    text_x_y_scale = ft.Text(\"offset_x=?, offset_y=?, scale=?\")\n    page.add(ft.Row([\n        ft.Column([text_x_y_scale,\n                extended,\n                   ft.Row([ft.Button(\"toggle pan\",on_click=lambda e,ex=extended,text_move=text:on_click(ex,text_move)),ft.Button(\"toggle interactive_scroll_bar\",on_click=lambda e,ex=extended:toggle_interactive(ex))]),ft.Row([ft.Button(\"toggle scroll_bar_x\",on_click=lambda e,ex=extended:toggle_scroll_x(ex)),ft.Button(\"toggle scroll_bar_y\",on_click=lambda e,ex=extended:toggle_scroll_y(ex))]),\n                   ft.Row([ft.Button(\"reset\",on_click=lambda e,ex=extended:ex.reset(400)),ft.Button(\"zoom in\",on_click=lambda e,ex=extended:ex.zoom(1.25)),ft.Button(\"zoom out\",on_click=lambda e,ex=extended:ex.zoom(0.75))]),\n                   ft.Row([ft.Button(\"get_transformation\",on_click=lambda e, ex=extended, x_y_scale=text_x_y_scale: get_transformation_click(ex,text_x_y_scale)),ft.Button(\"set_transformation(-100.0,-100.0,1.0)\",on_click=lambda e,ex=extended:ex.set_transformation_data(offset_x=-100.0,offset_y=-100.0,scale=1.0))])\n                   ],alignment=ft.MainAxisAlignment.CENTER)],alignment=ft.MainAxisAlignment.CENTER),\n\n    )\n\n\nft.app(main)\n</code></pre>"},{"location":"#installation","title":"\u2b07\ufe0f Installation","text":"<p>To install the <code>flet-extended-interactive-viewer</code> package:</p> pip <pre><code>pip install flet-extended-interactive-viewer  # (1)!\n</code></pre> <ol> <li>After this, you will have to manually add this package to your <code>requirements.txt</code> or <code>pyproject.toml</code>.</li> </ol> <p>Build your app:</p> linuxmacwindows <pre><code>flet build linux -v\n</code></pre> <pre><code>flet build macos -v\n</code></pre> <pre><code>flet build windows -v\n</code></pre>"},{"location":"FletExtendedInteractiveViewer/","title":"API Reference","text":""},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer","title":"<code>src.flet_extended_interactive_viewer.flet_extended_interactive_viewer</code>","text":""},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer-classes","title":"Classes","text":""},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.ExtendedInteractiveViewerUpdateEvent","title":"<code>ExtendedInteractiveViewerUpdateEvent</code>","text":"<p>               Bases: <code>ControlEvent</code></p> <p>Event triggered by <code>FletExtendedInteractiveViewer</code> whenever the user interacts with the viewer.</p> <p>Attributes:</p> Name Type Description <code>offset_x</code> <code>float</code> <p>The X offset of the content in the Interactive Viewer.</p> <code>offset_y</code> <code>float</code> <p>The Y offset of the content in the Interactive Viewer.</p> <code>scale</code> <code>float</code> <p>The scale of the content in the Interactive Viewer.</p> Example <pre><code>def update_handler(event: ExtendedInteractiveViewerUpdateEvent):\n    print(event.offset_x, event.offset_y, event.scale)\n\nFletExtendedInteractiveViewer(\n            content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                begin=ft.alignment.top_left,\n                end=ft.alignment.bottom_right,\n                colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n            )),\n            width=400, height=250,\n            on_interaction_update=update_handler,\n        )\n</code></pre> Source code in <code>src/flet_extended_interactive_viewer/flet_extended_interactive_viewer.py</code> <pre><code>class ExtendedInteractiveViewerUpdateEvent(ControlEvent):\n    \"\"\"\n    Event triggered by `FletExtendedInteractiveViewer` whenever the user interacts with the viewer.\n\n    Attributes:\n        offset_x (float): The X offset of the content in the Interactive Viewer.\n        offset_y (float): The Y offset of the content in the Interactive Viewer.\n        scale (float): The scale of the content in the Interactive Viewer.\n\n    Example:\n        ```python\n        def update_handler(event: ExtendedInteractiveViewerUpdateEvent):\n            print(event.offset_x, event.offset_y, event.scale)\n\n        FletExtendedInteractiveViewer(\n                    content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )),\n                    width=400, height=250,\n                    on_interaction_update=update_handler,\n                )\n\n        ```\n    \"\"\"\n    def __init__(self, e: ControlEvent):\n        super().__init__(e.target, e.name, e.data, e.control, e.page)\n        d = json.loads(e.data)\n        self.offset_x: float = d.get(\"offset_x\")\n        self.offset_y: float = d.get(\"offset_y\")\n        self.scale: float = d.get(\"scale\")\n</code></pre>"},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.FletExtendedInteractiveViewer","title":"<code>FletExtendedInteractiveViewer</code>","text":"<p>               Bases: <code>ConstrainedControl</code>, <code>AdaptiveControl</code></p> <p>Flet-Extended-Interactive-Viewer is a Flet control that provides multiple customization options for displaying two-dimensional content.</p> Highlights <ul> <li>XY Scrollbars: Synchronized scrollbars for the InteractiveViewer.</li> <li>XY Scrollbar Options: Easy to customize the experience e.g. you can disable the interaction with the scrollbars or disable Y scrollbars.</li> <li>Panning: Supports panning like <code>ft.InteractiveViewer</code>, with synchronized scrollbars. You can also disable panning to use only the scrollbars.</li> <li>Zoom: Zoom with the mouse/touchpad or via a function call. When zooming via a function call, the zoom can be limited to the content size.</li> <li>Transformation data: Provides access to the transformation applied to the content.</li> </ul> <p>Attributes:</p> Name Type Description <code>content</code> <code>Control</code> <p>The <code>Control</code> to be transformed by the <code>FletExtendedInteractiveViewer</code>.</p> <code>x_scroll_enabled</code> <code>bool</code> <p>Whether the Interactive Viewer should have an x_scroll_bar.</p> <p>Default: <code>True</code></p> <code>y_scroll_enabled</code> <code>bool</code> <p>Whether the Interactive Viewer should have a y_scroll_bar.</p> <p>Default: <code>True</code></p> <code>over_zoom_enabled</code> <code>bool</code> <p>Whether the Interactive Viewer allows the user with function calls to zoom larger than the content.</p> <p>Default: <code>False</code></p> <code>interactive_scroll_enabled</code> <code>bool</code> <p>Whether the scrollbars should be interactive or not.</p> <p>Default: <code>True</code></p> <code>pan_enabled</code> <code>bool</code> <p>Whether if it should be possible to move in the Interactive Viewer with panning.</p> <p>Default: <code>True</code></p> <code>max_scale</code> <code>float</code> <p>The max possible scaling for zooming with mouse/touchpad.</p> <p>Default: <code>2.5</code></p> <code>min_scale</code> <code>float</code> <p>The min possible scaling for zooming with mouse/touchpad.</p> <p>Default: <code>0.8</code></p> <code>scale_factor</code> <code>float</code> <p>The amount of scale to be performed per pointer scroll.</p> <p>Default: <code>200.0</code></p> <code>scale_enabled</code> <code>bool</code> <p>Whenever it should be possible zoome with mouse/touchpad.</p> <p>Default: <code>True</code></p> <code>constrained</code> <code>bool</code> <p>Whether the normal size constraints at this point in the widget tree are applied to the child.</p> <p>Default: <code>True</code></p> <code>on_interaction_update</code> <code>Callable</code> <p>Fires when the user interacts with the viewer.</p> <p>Event Handler argument type: <code>ExtendedInteractiveViewerUpdateEvent</code></p> Example <pre><code>def update_handler(event: ExtendedInteractiveViewerUpdateEvent):\n    print(event.offset_x, event.offset_y, event.scale)\n\nFletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                begin=ft.alignment.top_left,\n                end=ft.alignment.bottom_right,\n                colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n            )),\n            x_scroll_enabled = True,\n            y_scroll_enabled = True,\n            over_zoom_enabled = False,\n            interactive_scroll_enabled = True,\n            pan_enabled = True,\n            max_scale = 2.5,\n            min_scale = 0.8,\n            scale_factor = 0.8,\n            scale_enabled = True,\n            constrained = True,\n            on_interaction_update=update_handler,\n            )\n</code></pre> Source code in <code>src/flet_extended_interactive_viewer/flet_extended_interactive_viewer.py</code> <pre><code>class FletExtendedInteractiveViewer(ConstrainedControl, AdaptiveControl):\n    \"\"\"\n    Flet-Extended-Interactive-Viewer is a [Flet](https://flet.dev/) control that provides multiple customization options for displaying two-dimensional content.\n\n    Highlights:\n        - **XY Scrollbars:** Synchronized scrollbars for the InteractiveViewer.\n        - **XY Scrollbar Options:** Easy to customize the experience e.g. you can disable the interaction with the scrollbars or disable Y scrollbars.\n        - **Panning:** Supports panning like `ft.InteractiveViewer`, with synchronized scrollbars. You can also disable panning to use only the scrollbars.\n        - **Zoom:** Zoom with the mouse/touchpad or via a function call. When zooming via a function call, the zoom can be limited to the content size.\n        - **Transformation data:** Provides access to the transformation applied to the content.\n\n\n    Attributes:\n        content (Control): The `Control` to be transformed by the `FletExtendedInteractiveViewer`.\n        x_scroll_enabled (bool): Whether the Interactive Viewer should have an x_scroll_bar.\n\n            **Default:** `True`\n        y_scroll_enabled (bool): Whether the Interactive Viewer should have a y_scroll_bar.\n\n            **Default:** `True`\n        over_zoom_enabled (bool): Whether the Interactive Viewer allows the user with function calls to zoom larger than the content.\n\n            **Default:** `False`\n        interactive_scroll_enabled (bool): Whether the scrollbars should be interactive or not.\n\n            **Default:** `True`\n        pan_enabled (bool): Whether if it should be possible to move in the Interactive Viewer with panning.\n\n            **Default:** `True`\n        max_scale (float): The max possible scaling for zooming with mouse/touchpad.\n\n            **Default:** `2.5`\n        min_scale (float): The min possible scaling for zooming with mouse/touchpad.\n\n            **Default:** `0.8`\n        scale_factor (float): The amount of scale to be performed per pointer scroll.\n\n            **Default:** `200.0`\n        scale_enabled (bool): Whenever it should be possible zoome with mouse/touchpad.\n\n            **Default:** `True`\n        constrained (bool): Whether the normal size constraints at this point in the widget tree are applied to the child.\n\n            **Default:** `True`\n        on_interaction_update (Callable): Fires when the user interacts with the viewer.\n\n            **Event Handler argument type:** `ExtendedInteractiveViewerUpdateEvent`\n\n\n    Example:\n        ```python\n        def update_handler(event: ExtendedInteractiveViewerUpdateEvent):\n            print(event.offset_x, event.offset_y, event.scale)\n\n        FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )),\n                    x_scroll_enabled = True,\n                    y_scroll_enabled = True,\n                    over_zoom_enabled = False,\n                    interactive_scroll_enabled = True,\n                    pan_enabled = True,\n                    max_scale = 2.5,\n                    min_scale = 0.8,\n                    scale_factor = 0.8,\n                    scale_enabled = True,\n                    constrained = True,\n                    on_interaction_update=update_handler,\n                    )\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n            #special\n            content: Control,\n            x_scroll_enabled: Optional[bool] = None,\n            y_scroll_enabled: Optional[bool] = None,\n            over_zoom_enabled: Optional[bool] = None,\n            interactive_scroll_enabled: Optional[bool] = None,\n            pan_enabled: Optional[bool] = None,\n            max_scale: OptionalNumber = None,\n            min_scale: OptionalNumber = None,\n            scale_factor: OptionalNumber = None,\n            scale_enabled: Optional[bool] = None,\n            constrained: Optional[bool] = None,\n            on_interaction_update: Optional[\n                Callable[[ExtendedInteractiveViewerUpdateEvent], None]\n            ] = None,\n            #normal\n            ref: Optional[Ref] = None,\n            key: Optional[str] = None,\n            width: OptionalNumber = None,\n            height: OptionalNumber = None,\n            left: OptionalNumber = None,\n            top: OptionalNumber = None,\n            right: OptionalNumber = None,\n            bottom: OptionalNumber = None,\n            expand: Union[None, bool, int] = None,\n            expand_loose: Optional[bool] = None,\n            col: Optional[ResponsiveNumber] = None,\n            opacity: OptionalNumber = None,\n            rotate: Optional[RotateValue] = None,\n            scale: Optional[ScaleValue] = None,\n            offset: Optional[OffsetValue] = None,\n            aspect_ratio: OptionalNumber = None,\n            animate_opacity: Optional[AnimationValue] = None,\n            animate_size: Optional[AnimationValue] = None,\n            animate_position: Optional[AnimationValue] = None,\n            animate_rotation: Optional[AnimationValue] = None,\n            animate_scale: Optional[AnimationValue] = None,\n            animate_offset: Optional[AnimationValue] = None,\n            on_animation_end: OptionalControlEventCallable = None,\n            tooltip: Optional[TooltipValue] = None,\n            badge: Optional[BadgeValue] = None,\n            visible: Optional[bool] = None,\n            disabled: Optional[bool] = None,\n            data: Any = None,\n            adaptive: Optional[bool] = None,\n    ):\n        ConstrainedControl.__init__(\n            self,\n            ref=ref,\n            key=key,\n            width=width,\n            height=height,\n            left=left,\n            top=top,\n            right=right,\n            bottom=bottom,\n            expand=expand,\n            expand_loose=expand_loose,\n            col=col,\n            opacity=opacity,\n            rotate=rotate,\n            scale=scale,\n            offset=offset,\n            aspect_ratio=aspect_ratio,\n            animate_opacity=animate_opacity,\n            animate_size=animate_size,\n            animate_position=animate_position,\n            animate_rotation=animate_rotation,\n            animate_scale=animate_scale,\n            animate_offset=animate_offset,\n            on_animation_end=on_animation_end,\n            tooltip=tooltip,\n            badge=badge,\n            visible=visible,\n            disabled=disabled,\n            data=data,\n        )\n        AdaptiveControl.__init__(self, adaptive=adaptive)\n\n        self.__on_interaction_update = EventHandler(\n            lambda e: ExtendedInteractiveViewerUpdateEvent(e)\n        )\n        self._add_event_handler(\n            \"interaction_update\", self.__on_interaction_update.get_handler()\n        )\n\n        self.content = content\n        self.x_scroll_enabled = x_scroll_enabled\n        self.y_scroll_enabled = y_scroll_enabled\n        self.over_zoom_enabled = over_zoom_enabled\n        self.interactive_scroll_enabled = interactive_scroll_enabled\n        self.pan_enabled = pan_enabled\n        self.scale_enabled = scale_enabled\n        self.constrained = constrained\n        self.max_scale = max_scale\n        self.min_scale = min_scale\n        self.scale_factor = scale_factor\n        self.on_interaction_update = on_interaction_update\n\n    def before_update(self):\n        super().before_update()\n        assert self.__content.visible, \"content must be visible\"\n\n    def _get_control_name(self):\n        return \"flet_extended_interactive_viewer\"\n\n    def _get_children(self):\n        children = []\n        if self.__content:\n            self.__content._set_attr_internal(\"n\", \"content\")\n            children.append(self.__content)\n        return children\n\n    def get_transformation_data(self):\n        \"\"\"\n        Gets the transformation data which is applied to the content of the Interactive Viewer.\n\n        Returns:\n            offset_x (float): The x offset of the transformation data.\n            offset_y (float): The y offset of the transformation data.\n            scale (float): The scale of the transformation data.\n\n        Example:\n            ```python\n            fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                            begin=ft.alignment.top_left,\n                            end=ft.alignment.bottom_right,\n                            colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                        )))\n\n            offset_x,offset_y,scale = fei.get_transformation_data()\n            print(offset_x, offset_y, scale)\n            ```\n        \"\"\"\n        data = self.invoke_method(\"get_transformation_data\", {}, wait_for_result=True)\n        d = json.loads(data)\n        offset_x: float = d.get(\"offset_x\")\n        offset_y: float = d.get(\"offset_y\")\n        scale: float = d.get(\"scale\")\n        return offset_x, offset_y, scale\n\n    def set_transformation_data(self, offset_x: OptionalNumber = None, offset_y: OptionalNumber = None, scale: OptionalNumber = None, animation_duration: Optional[DurationValue] = None):\n        \"\"\"\n        Sets the transformation data which is applied to the content of the Interactive Viewer.\n\n        Attributes:\n            offset_x (float): The x offset of the transformation data.\n\n                **Default:** `0.0`\n\n            offset_y (float): The y offset of the transformation data.\n\n                **Default:** `0.0`\n            scale (float): The scale of the transformation data.\n\n                **Default:** `0.0`\n            animation_duration (DurationValue): The duration of the animation.\n\n                **Default:** `0`\n\n        Example:\n            ```python\n            fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                            begin=ft.alignment.top_left,\n                            end=ft.alignment.bottom_right,\n                            colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                        )))\n\n            fei.set_transformation_data(-100.0, -100.0, 1.0)\n            ```\n        \"\"\"\n        self.invoke_method(\n            \"set_transformation_data\", arguments={\"offSetX\": self._convert_attr_json(offset_x), \"offSetY\": self._convert_attr_json(offset_y), \"scale\": self._convert_attr_json(scale), \"duration\": self._convert_attr_json(animation_duration)},\n        )\n\n    def reset(self, animation_duration: Optional[DurationValue] = None):\n        \"\"\"\n        Resets the transformation done on the content of the Interactive Viewer.\n        By default, the reset happens with no animation (immediately).\n\n        Attributes:\n            animation_duration (DurationValue): The duration of the animation.\n\n                **Default:** `0`\n\n        Example:\n            ```python\n            fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                            begin=ft.alignment.top_left,\n                            end=ft.alignment.bottom_right,\n                            colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                        )))\n\n            fei.reset(400)\n            ```\n        \"\"\"\n        self.invoke_method(\n            \"reset\", arguments={\"duration\": self._convert_attr_json(animation_duration)}\n        )\n\n    def zoom(self, factor: Number):\n        \"\"\"\n        Zooming in or out in the Interactive Viewer.\n\n        Arguments:\n            factor (float): The zoom factor.\n\n                Values below `1` will zoom out, values above `1` will zoom in.\n\n        Example:\n            ```python\n            fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                            begin=ft.alignment.top_left,\n                            end=ft.alignment.bottom_right,\n                            colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                        )),\n                        over_zoom_enabled = False,\n                        )\n\n            fei.zoom(1.25) #Zooms in\n            ```\n        \"\"\"\n        self.invoke_method(\"zoom\", arguments={\"factor\": str(factor)})\n\n    # pan_enabled\n    @property\n    def pan_enabled(self) -&gt; bool:\n        return self._get_attr(\"panEnabled\", data_type=\"bool\", def_value=True)\n\n    @pan_enabled.setter\n    def pan_enabled(self, value: Optional[bool]):\n        self._set_attr(\"panEnabled\", value)\n\n    # over_zoom_enabled\n    @property\n    def over_zoom_enabled(self) -&gt; bool:\n        return self._get_attr(\"overZoomEnabled\", data_type=\"bool\", def_value=False)\n\n    @over_zoom_enabled.setter\n    def over_zoom_enabled(self, value: Optional[bool]):\n        self._set_attr(\"overZoomEnabled\", value)\n\n    # x_scroll_enabled\n    @property\n    def x_scroll_enabled(self) -&gt; bool:\n        return self._get_attr(\"xScrollEnabled\", data_type=\"bool\", def_value=True)\n\n    @x_scroll_enabled.setter\n    def x_scroll_enabled(self, value: Optional[bool]):\n        self._set_attr(\"xScrollEnabled\", value)\n\n    # y_scroll_enabled\n    @property\n    def y_scroll_enabled(self) -&gt; bool:\n        return self._get_attr(\"yScrollEnabled\", data_type=\"bool\", def_value=True)\n\n    @y_scroll_enabled.setter\n    def y_scroll_enabled(self, value: Optional[bool]):\n        self._set_attr(\"yScrollEnabled\", value)\n\n    # interactive_scroll_enabled\n    @property\n    def interactive_scroll_enabled(self) -&gt; bool:\n        return self._get_attr(\"interactiveScrollEnabled\", data_type=\"bool\", def_value=True)\n\n    @interactive_scroll_enabled.setter\n    def interactive_scroll_enabled(self, value: Optional[bool]):\n        self._set_attr(\"interactiveScrollEnabled\", value)\n\n    # min_scale\n    @property\n    def min_scale(self) -&gt; float:\n        return self._get_attr(\"minScale\", data_type=\"float\", def_value=0.8)\n\n    @min_scale.setter\n    def min_scale(self, value: OptionalNumber):\n        assert value is None or value &gt; 0, \"min_scale must be greater than 0\"\n        self._set_attr(\"minScale\", value)\n\n    # max_scale\n    @property\n    def max_scale(self) -&gt; float:\n        return self._get_attr(\"maxScale\", data_type=\"float\", def_value=2.5)\n\n    @max_scale.setter\n    def max_scale(self, value: OptionalNumber):\n        assert value is None or value &gt; 0, \"max_scale must be greater than 0\"\n        self._set_attr(\"maxScale\", value)\n\n\n    # content property\n    @property\n    def content(self) -&gt; Control:\n        return self.__content\n\n    @content.setter\n    def content(self, value: Optional[Control]):\n        self.__content = value\n\n    # constrained\n    @property\n    def constrained(self) -&gt; bool:\n        return self._get_attr(\"constrained\", data_type=\"bool\", def_value=True)\n\n    @constrained.setter\n    def constrained(self, value: Optional[bool]):\n        self._set_attr(\"constrained\", value)\n\n    # on_interaction_update\n    @property\n    def on_interaction_update(\n            self,\n    ) -&gt; OptionalEventCallable[ExtendedInteractiveViewerUpdateEvent]:\n        return self.__on_interaction_update.handler\n\n    @on_interaction_update.setter\n    def on_interaction_update(\n            self,\n            handler: OptionalEventCallable[ExtendedInteractiveViewerUpdateEvent],\n    ):\n        self.__on_interaction_update.handler = handler\n\n    # scale_enabled\n    @property\n    def scale_enabled(self) -&gt; bool:\n        return self._get_attr(\"scaleEnabled\", data_type=\"bool\", def_value=True)\n\n    @scale_enabled.setter\n    def scale_enabled(self, value: Optional[bool]):\n        self._set_attr(\"scaleEnabled\", value)\n\n    # scale_factor\n    @property\n    def scale_factor(self) -&gt; float:\n        return self._get_attr(\"scaleFactor\", data_type=\"float\", def_value=200)\n\n    @scale_factor.setter\n    def scale_factor(self, value: OptionalNumber):\n        self._set_attr(\"scaleFactor\", value)\n</code></pre>"},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.FletExtendedInteractiveViewer-functions","title":"Functions","text":""},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.FletExtendedInteractiveViewer.get_transformation_data","title":"<code>get_transformation_data()</code>","text":"<p>Gets the transformation data which is applied to the content of the Interactive Viewer.</p> <p>Returns:</p> Name Type Description <code>offset_x</code> <code>float</code> <p>The x offset of the transformation data.</p> <code>offset_y</code> <code>float</code> <p>The y offset of the transformation data.</p> <code>scale</code> <code>float</code> <p>The scale of the transformation data.</p> Example <pre><code>fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                begin=ft.alignment.top_left,\n                end=ft.alignment.bottom_right,\n                colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n            )))\n\noffset_x,offset_y,scale = fei.get_transformation_data()\nprint(offset_x, offset_y, scale)\n</code></pre> Source code in <code>src/flet_extended_interactive_viewer/flet_extended_interactive_viewer.py</code> <pre><code>def get_transformation_data(self):\n    \"\"\"\n    Gets the transformation data which is applied to the content of the Interactive Viewer.\n\n    Returns:\n        offset_x (float): The x offset of the transformation data.\n        offset_y (float): The y offset of the transformation data.\n        scale (float): The scale of the transformation data.\n\n    Example:\n        ```python\n        fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )))\n\n        offset_x,offset_y,scale = fei.get_transformation_data()\n        print(offset_x, offset_y, scale)\n        ```\n    \"\"\"\n    data = self.invoke_method(\"get_transformation_data\", {}, wait_for_result=True)\n    d = json.loads(data)\n    offset_x: float = d.get(\"offset_x\")\n    offset_y: float = d.get(\"offset_y\")\n    scale: float = d.get(\"scale\")\n    return offset_x, offset_y, scale\n</code></pre>"},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.FletExtendedInteractiveViewer.reset","title":"<code>reset(animation_duration=None)</code>","text":"<p>Resets the transformation done on the content of the Interactive Viewer. By default, the reset happens with no animation (immediately).</p> <p>Attributes:</p> Name Type Description <code>animation_duration</code> <code>DurationValue</code> <p>The duration of the animation.</p> <p>Default: <code>0</code></p> Example <pre><code>fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                begin=ft.alignment.top_left,\n                end=ft.alignment.bottom_right,\n                colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n            )))\n\nfei.reset(400)\n</code></pre> Source code in <code>src/flet_extended_interactive_viewer/flet_extended_interactive_viewer.py</code> <pre><code>def reset(self, animation_duration: Optional[DurationValue] = None):\n    \"\"\"\n    Resets the transformation done on the content of the Interactive Viewer.\n    By default, the reset happens with no animation (immediately).\n\n    Attributes:\n        animation_duration (DurationValue): The duration of the animation.\n\n            **Default:** `0`\n\n    Example:\n        ```python\n        fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )))\n\n        fei.reset(400)\n        ```\n    \"\"\"\n    self.invoke_method(\n        \"reset\", arguments={\"duration\": self._convert_attr_json(animation_duration)}\n    )\n</code></pre>"},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.FletExtendedInteractiveViewer.set_transformation_data","title":"<code>set_transformation_data(offset_x=None, offset_y=None, scale=None, animation_duration=None)</code>","text":"<p>Sets the transformation data which is applied to the content of the Interactive Viewer.</p> <p>Attributes:</p> Name Type Description <code>offset_x</code> <code>float</code> <p>The x offset of the transformation data.</p> <p>Default: <code>0.0</code></p> <code>offset_y</code> <code>float</code> <p>The y offset of the transformation data.</p> <p>Default: <code>0.0</code></p> <code>scale</code> <code>float</code> <p>The scale of the transformation data.</p> <p>Default: <code>0.0</code></p> <code>animation_duration</code> <code>DurationValue</code> <p>The duration of the animation.</p> <p>Default: <code>0</code></p> Example <pre><code>fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                begin=ft.alignment.top_left,\n                end=ft.alignment.bottom_right,\n                colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n            )))\n\nfei.set_transformation_data(-100.0, -100.0, 1.0)\n</code></pre> Source code in <code>src/flet_extended_interactive_viewer/flet_extended_interactive_viewer.py</code> <pre><code>def set_transformation_data(self, offset_x: OptionalNumber = None, offset_y: OptionalNumber = None, scale: OptionalNumber = None, animation_duration: Optional[DurationValue] = None):\n    \"\"\"\n    Sets the transformation data which is applied to the content of the Interactive Viewer.\n\n    Attributes:\n        offset_x (float): The x offset of the transformation data.\n\n            **Default:** `0.0`\n\n        offset_y (float): The y offset of the transformation data.\n\n            **Default:** `0.0`\n        scale (float): The scale of the transformation data.\n\n            **Default:** `0.0`\n        animation_duration (DurationValue): The duration of the animation.\n\n            **Default:** `0`\n\n    Example:\n        ```python\n        fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )))\n\n        fei.set_transformation_data(-100.0, -100.0, 1.0)\n        ```\n    \"\"\"\n    self.invoke_method(\n        \"set_transformation_data\", arguments={\"offSetX\": self._convert_attr_json(offset_x), \"offSetY\": self._convert_attr_json(offset_y), \"scale\": self._convert_attr_json(scale), \"duration\": self._convert_attr_json(animation_duration)},\n    )\n</code></pre>"},{"location":"FletExtendedInteractiveViewer/#src.flet_extended_interactive_viewer.flet_extended_interactive_viewer.FletExtendedInteractiveViewer.zoom","title":"<code>zoom(factor)</code>","text":"<p>Zooming in or out in the Interactive Viewer.</p> <p>Parameters:</p> Name Type Description Default <code>factor</code> <code>float</code> <p>The zoom factor.</p> <p>Values below <code>1</code> will zoom out, values above <code>1</code> will zoom in.</p> required Example <pre><code>fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                begin=ft.alignment.top_left,\n                end=ft.alignment.bottom_right,\n                colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n            )),\n            over_zoom_enabled = False,\n            )\n\nfei.zoom(1.25) #Zooms in\n</code></pre> Source code in <code>src/flet_extended_interactive_viewer/flet_extended_interactive_viewer.py</code> <pre><code>def zoom(self, factor: Number):\n    \"\"\"\n    Zooming in or out in the Interactive Viewer.\n\n    Arguments:\n        factor (float): The zoom factor.\n\n            Values below `1` will zoom out, values above `1` will zoom in.\n\n    Example:\n        ```python\n        fei= FletExtendedInteractiveViewer(content=ft.Container(width=900,height=800,gradient=ft.LinearGradient(\n                        begin=ft.alignment.top_left,\n                        end=ft.alignment.bottom_right,\n                        colors=[ft.Colors.PINK, ft.Colors.ORANGE_700],\n                    )),\n                    over_zoom_enabled = False,\n                    )\n\n        fei.zoom(1.25) #Zooms in\n        ```\n    \"\"\"\n    self.invoke_method(\"zoom\", arguments={\"factor\": str(factor)})\n</code></pre>"}]}